@page "/agenda"
@using TestCore.Models
@using TestCore.Datalayer
@using Microsoft.EntityFrameworkCore
@inject DBContext dbContext
<h3>CisAgenda</h3>

<br />

<table class="table">

@if(cisAgendaLoad == null){
    <p>Loading...</p>
}
else
{
    <RadzenButton style="margin-bottom: 10px" Text="Přidat novou agendu" Click="@InsertRow" Disabled=@(cisAgendaToInsert != null)/>
    <RadzenDataGrid @ref="agendaGrid" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
        Data="@agends" TItem="CisAgenda" ColumnWidth="1300px" RowCreate="@OnCreateRow" RowUpdate="@OnUpdateRow">
        <Columns>

            <RadzenDataGridColumn Title="Popis Agenda" TItem="CisAgenda" Property="PopisAgenda" Width="1000px">
                 <EditTemplate Context="cisAgenda">
                    <RadzenTextBox @bind-Value="cisAgenda.PopisAgenda" Style="width:100%; display: block" Name="PopisAgenda" />
                    <RadzenRequiredValidator Text="Text je vyžadován" Component="PopisAgenda" Popup="true" />              
                </EditTemplate>                
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="DlouhodobeAn" TItem="CisAgenda" Property="DlouhodobeAn" Width="100px" TextAlign="TextAlign.Center"> 
                <Template Context="cisAgenda">
                     <RadzenCheckBox @bind-Value="cisAgenda.DlouhodobeAn" Name="DlouhodobeAn" TValue="bool"/>
                </Template>
                <EditTemplate Context="cisAgenda">
                    <RadzenCheckBox @bind-Value="cisAgenda.DlouhodobeAn" Name="DlouhodobeAn"/>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Upravit" TItem="CisAgenda" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                <Template Context="cisAgenda">
                    <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Warning" Class="m-1" Click="@(args => EditRow(cisAgenda))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="cisAgenda">
                    <RadzenButton Icon="check_circle" ButtonStyle="ButtonStyle.Success"  Class="m-1" Click="@((args) => SaveRow(cisAgenda))">
                    </RadzenButton>
                    <RadzenButton Icon="report" ButtonStyle="ButtonStyle.Danger" Class="m-1" Click="@((args) => CancelEdit(cisAgenda))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Title="Smazat" TItem="CisAgenda" Context="order" Filterable="false" Sortable="false"  TextAlign="TextAlign.Center" Width="100px">
                <Template Context="cisAgenda">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="report" Class="m-1" Click="@(args => DeleteRow(cisAgenda))"  @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
</table>

@code{
    RadzenDataGrid<CisAgenda> agendaGrid;
    IEnumerable<CisAgenda> cisAgendaLoad;
    IList<CisAgenda> agends;
    CisAgenda cisAgendaToInsert;
    
    protected override async Task OnInitializedAsync()
    {
        cisAgendaLoad = await Task.Run(()=>Task.FromResult(new List<CisAgenda>()));
        agends = dbContext.Agendas.ToList();
    }

    async Task EditRow(CisAgenda cisAgenda)
    {
        await agendaGrid.EditRow(cisAgenda);
    }

    void OnUpdateRow(CisAgenda cisAgenda)
    {
        if(cisAgenda == cisAgendaToInsert)
        {
            cisAgendaToInsert = null;
        }
        dbContext.Update(cisAgenda);
        dbContext.SaveChanges();
    }

    async Task SaveRow(CisAgenda cisAgenda)
    {
        if(cisAgenda == cisAgendaToInsert)
        {
            cisAgendaToInsert = null;
        }
        await agendaGrid.UpdateRow(cisAgenda);
    }

    void CancelEdit(CisAgenda cisAgenda)
    {
        if (cisAgenda == cisAgendaToInsert)
        {
            cisAgendaToInsert = null;
        }
        agendaGrid.CancelEditRow(cisAgenda);

        var cisAgendaEntry = dbContext.Entry(cisAgenda);
        if (cisAgendaEntry.State == EntityState.Modified){
            cisAgendaEntry.CurrentValues.SetValues(cisAgendaEntry.OriginalValues);
            cisAgendaEntry.State = EntityState.Unchanged;
        }
    }

    async Task DeleteRow(CisAgenda cisAgenda)
    {
        if(cisAgenda == cisAgendaToInsert)
        {
            cisAgendaToInsert = null;
        }

        if(agends.Contains(cisAgenda))
        {
            dbContext.Remove<CisAgenda>(cisAgenda);
            dbContext.SaveChanges();
            agends.Remove(cisAgenda);
            await agendaGrid.Reload();
        }
        else
        {
            agendaGrid.CancelEditRow(cisAgenda);
        }
    }

    async Task InsertRow()
    {
        cisAgendaToInsert = new CisAgenda();
        cisAgendaToInsert.GidProjekt = Guid.NewGuid();
        cisAgendaToInsert.PopisAgenda="Upravte tento text...";
        await agendaGrid.InsertRow(cisAgendaToInsert);
    }

    void OnCreateRow(CisAgenda cisAgenda)
    {
        dbContext.Add(cisAgenda);
        dbContext.SaveChanges();
    }
}
